#include<stdio.h>
#include<stdlib.h>
# define MAX 100
char stack[MAX];
char infix[MAX];
char postfix[MAX];
int top=-1;
void isfull()
{
    if(top==MAX-1)
    return 1;
    else 
    return 0;
}
void push(char c)
{
    if(isfull())
    {
    printf("stack is overflowed");
    return;
    }
    top++;
    stack[top]=c;
}
void isempty()
{
    if(top==-1)
    return 1;
    else
    return 0;
}
char pop()
{
    if(isempty())
    {
    printf("stack is underflowed");
    return;
    }
    stack[top]=c;
    top--;
}
void print()
{
   for(i=0;stack[i]!=0;i++)
   printf("%c",&stack[i]);
}
int precedence( char c)
{ 
    if(c=='+'||c=='-')
    return 1;
    else if(c=='*'||c=='/')
    return 2;
    else if(c=='^')
    return 3;
    else 
    return 0;
}
void infixtopostfix()
{
    int i,j=0;
    char temp,c;
    for(i=0;infix[i]!='\0';i++)
    {
        c=infix[i];
        if(c>='0'&&c<='9')
        {
            postfix[j++]=c;
            return;
        }
        while(!isempty()&&precedence(stack[top]>=precedence(c)))
        {   
              
    
int main()
{
    printf("enter infix:");
    gets(infix);
    infixtopostfix();
    print();
}
    
